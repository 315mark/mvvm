apply plugin: 'com.android.application'

apply plugin: 'WMRouter'

def globalConfig = rootProject.ext
def version = globalConfig.android
def dependency = globalConfig.compiler

/**
 * 版本号打包自增
 *
 * @param filename  要打开的文件名字
 * @param propName   文件里面的键名字
 * @param isRootProject   是否用rootProject 文件打开，true 的话，在编译时候可以得到值，打包时候无法得到值。false的话在打包时候可以得到值,编译时候 无法得到值
 * @return  所选择的文件里面的propName对应的值
 */
def getProperty(String filename, String propName,boolean isRootProject) {
    //在这里 必须是在rootProject.file  如果 file的话 ，编译时候会出错
    def propsFile
    if (isRootProject) {
        propsFile = rootProject.file(filename)
    }else {
        propsFile=file(filename)
    }
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            //下面这个输出在android studio3.1里面 在Build窗口 右边一个锤子下面 toggle哪里，就是原来的message哪里
            print("versionCode "+props[propName])
            return Integer.parseInt(props[propName])
        } else {
            print("No such property " + propName + " in file " + filename);
        }
    } else {
        print(filename + " does not exist!")
    }
}

//version.properties  里面的vesioncode自增
def PropertyAdd(String filename, String propName) {
    //这里必须用file  如果用rootProject的话 则找不到file为null
    def propsFile =file(filename)
    //只有在打正式版的情况下才继续运行，否则退出方法，这样是为了防止 编译时候versionCode 也自增 if里面的参数可以在Build窗口里面 message 最上边[]里面就是
    def runTasks = gradle.startParameter.taskNames
    if (!(':app:assembleRelease' in runTasks)) {
        return
    }
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        //这里要注意 props[propName] 是String 类型
        if (props[propName] != null) {
            def code= (props[propName]).toInteger() //转成Integer
            props[propName]= (++code).toString()  //自增 且转成String
        } else {
            print("No such property " + propName + " in file " + filename);
        }
        //在这里提交 对version.properties的更改
        props.store(propsFile.newWriter(),null)
    } else {
        print(filename + " does not exist!")
    }
}

//用于生成时间
def buildTime() {
    def date = new Date()
    //yy年 MM月 dd日 HH小时 mm分钟 ss秒
    def formattedDate = date.format('yyMMdd_HHmm')
    return formattedDate
}


android {
    compileSdkVersion version.compileSdkVersion
    buildToolsVersion version.buildToolsVersion

    defaultConfig {
        minSdkVersion version.minSdkVersion
        targetSdkVersion version.targetSdkVersion
        applicationId version.applicationId
        versionCode  getProperty("version_code.properties","versionCode",true)
        versionName version.versionName
    }

    sourceSets {
        main {
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //给文件重新命名的代码，记住是在Android 节点下
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                output ->
                    //拿到输出文件
                    def outputFile = output.outputFile
                    //这里也可以调用上面的 (':app:assembleRelease' in runTasks) 进行判断 感觉会更好一些
                    if (outputFile.name.contains("release")) {
                        //在字符串里面调用方法的话，得要${ }里面调用 切记
//                        outputFileName = new File("../release/","release-${defaultConfig.versionName}-${getProperty("version_code.properties","versionCode",false)}_DATE-${buildTime()}.apk");
                        //调用方法 增加versionCode 值
                        PropertyAdd("version_code.properties", "versionCode")
                    }
                    if (outputFile.name.contains("debug")) {
//                        outputFileName = new File("../debug/","debug-${defaultConfig.versionName}-${getProperty("version_code.properties","versionCode",false)}_DATE-${buildTime()}.apk")
                        //调用方法 增加versionCode 值
                        PropertyAdd("version_code.properties", "versionCode")
                    }
            }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //在使用了注解的每个模块中配置注解生成器，包括Application和Library工程
    annotationProcessor dependency.router_compiler
    //宿主项目中判断组件是否需要独立运行
    if (isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        api project(path: ':module_base')
    } else {
        //登录组件
        implementation project(':module_login')
        //主业务组件
        implementation project(path: ':module_main')
        //任务组件
        implementation project(':module_task')
        //订单组件
        implementation project(':module_order')
        //个人中心组件
//        implementation project(':module_mine')
    }
}
